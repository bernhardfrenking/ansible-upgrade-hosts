---
- name: Prepare VM for changes
  block:

    # - name: Display inventory_hostname.upgrade.snapshot
    #   debug: 
    #     var: hostvars[inventory_hostname].upgrade.snapshot

    - name: Extract Node and VM ID for VM {{ inventory_hostname }}
      set_fact:
        vm_id: "{{ proxmox_cluster_information.json.data | selectattr('name', 'equalto', inventory_hostname) | map(attribute='vmid') | first }}"
        vm_node: "{{ proxmox_cluster_information.json.data | selectattr('name', 'equalto', inventory_hostname) | map(attribute='node') | first }}"
        vm_type: "{{ proxmox_cluster_information.json.data | selectattr('name', 'equalto', inventory_hostname) | map(attribute='type') | first }}"
       
    - name: Get VM Status
      delegate_to: localhost
      uri:
        method: GET
        validate_certs: no
        url: "https://{{ proxmox_api_host }}:{{ proxmox_api_port }}/api2/json/nodes/{{ vm_node }}/{{ vm_type }}/{{ vm_id }}/status/current"
        headers: "{{ proxmox_api_cookie }}"
      register: vm_status

    - name: Start qemu VM {{ inventory_hostname }}
      delegate_to: localhost
      uri:
        method: POST
        validate_certs: no
        url: "https://{{ proxmox_api_host }}:{{ proxmox_api_port }}/api2/json/nodes/{{ vm_node }}/{{ vm_type }}/{{ vm_id }}/status/start"
        headers: "{{ proxmox_api_cookie }}"
        body_format: form-urlencoded
        body:
          timeout: "{{ boot_time }}"
      when: vm_status.json.data.status == 'stopped' and vm_type == 'qemu'

    - name: Start lxc VM {{ inventory_hostname }}
      delegate_to: localhost
      uri:
        method: POST
        validate_certs: no
        url: "https://{{ proxmox_api_host }}:{{ proxmox_api_port }}/api2/json/nodes/{{ vm_node }}/{{ vm_type }}/{{ vm_id }}/status/start"
        headers: "{{ proxmox_api_cookie }}"
        body_format: form-urlencoded
      when: vm_status.json.data.status == 'stopped' and vm_type == 'lxc'

    - name: Waiting for the VM to boot up
      delegate_to: localhost
      pause: 
        seconds: "{{ boot_time }}"
      when: vm_status.json.data.status == 'stopped'
    
    - name: Gather VM Facts
      gather_facts:
      register: vm_facts

    - name: Take a VM Snapshot of qemu VM {{ inventory_hostname }}
      delegate_to: localhost
      uri:
        method: POST
        validate_certs: no
        url: "https://{{ proxmox_api_host }}:{{ proxmox_api_port }}/api2/json/nodes/{{ vm_node }}/{{ vm_type }}/{{ vm_id }}/snapshot"
        headers: "{{ proxmox_api_cookie }}"
        body_format: form-urlencoded
        body:
          snapname: "snap_before_patch-{{ ansible_date_time.iso8601_basic_short }}"
          description: "Snapshot taken by Update Automation"
          vmstate: 1
      when: (hostvars[inventory_hostname].upgrade.snapshot|default(false)) and vm_type == 'qemu'
    
    - name: Take a VM Snapshot of lxc VM {{ inventory_hostname }}
      delegate_to: localhost
      uri:
        method: POST
        validate_certs: no
        url: "https://{{ proxmox_api_host }}:{{ proxmox_api_port }}/api2/json/nodes/{{ vm_node }}/{{ vm_type }}/{{ vm_id }}/snapshot"
        headers: "{{ proxmox_api_cookie }}"
        body_format: form-urlencoded
        body:
          snapname: "snap_before_patch-{{ ansible_date_time.iso8601_basic_short }}"
          description: "Snapshot taken by Update Automation"
      when: (hostvars[inventory_hostname].upgrade.snapshot|default(false)) and vm_type == 'lxc'

    - name: Waiting for the VM to finish Snapshot
      delegate_to: localhost
      pause: 
        seconds: "{{ boot_time }}"
      when: (hostvars[inventory_hostname].upgrade.snapshot|default(false))

